// @generated by protobuf-ts 2.9.9 with parameter only_http,long_type_number,use_proto_field_name
// @generated from protobuf file "service1.proto" (package "rum", syntax proto3)
// tslint:disable
import type { VAxiosInstance } from "@protobuf-ts/runtime-http";
import type { VAxios } from "@protobuf-ts/runtime-http";
import { HttpTransport } from "@protobuf-ts/runtime-http";
import type { ServiceInfo } from "@protobuf-ts/runtime-http";
import { Rum1 } from "./service1";
import type { UploadFile } from "@protobuf-ts/runtime-http";
import type { ReportReply } from "./message";
import type { ReportRequest } from "./message";
import type { HttpResult } from "@protobuf-ts/runtime-http";
import type { HttpOptions } from "@protobuf-ts/runtime-http";
/**
 * @generated from protobuf service rum.Rum1
 */
export interface IRum1Client$1 {
    /**
     * 上报接口
     *
     * @generated from protobuf rpc: ReportAbc(rum.ReportRequest) returns (rum.ReportReply);
     */
    reportAbc(input: ReportRequest, options?: HttpOptions["requestOptions"]): HttpResult<ReportReply>;
    /**
     * 上传接口
     *
     * @generated from protobuf rpc: transforming(rum.ReportRequest) returns (rum.ReportReply);
     */
    transforming(input: UploadFile, options?: HttpOptions["requestOptions"]): HttpResult<ReportReply>;
}
/**
 * @generated from protobuf service rum.Rum1
 */
export class Rum1Client$1 implements IRum1Client$1, ServiceInfo {
    methods = Rum1.methods;
    public defHttp: HttpTransport;
    constructor(vAxios: VAxios | VAxiosInstance, opt: HttpOptions = {}) {
        this.defHttp = new HttpTransport(vAxios, opt);
        this.reportAbc = this.reportAbc.bind(this);
        this.transforming = this.transforming.bind(this);
    }
    /**
     * 上报接口
     *
     * @generated from protobuf rpc: ReportAbc(rum.ReportRequest) returns (rum.ReportReply);
     */
    reportAbc(input: ReportRequest, options?: HttpOptions["requestOptions"]): HttpResult<ReportReply> {
        const method = this.methods[0], opt = options;
        return this.defHttp.request<ReportRequest, ReportReply>(method, input, opt);
    }
    /**
     * 上传接口
     *
     * @generated from protobuf rpc: transforming(rum.ReportRequest) returns (rum.ReportReply);
     */
    transforming(input: UploadFile, options?: HttpOptions["requestOptions"]): HttpResult<ReportReply> {
        const method = this.methods[1], opt = options;
        return this.defHttp.request<UploadFile, ReportReply>(method, input, opt);
    }
}

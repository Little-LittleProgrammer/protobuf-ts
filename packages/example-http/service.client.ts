// @generated by protobuf-ts 2.9.7-alpha.0 with parameter only_http
// @generated from protobuf file "service.proto" (package "rum", syntax proto3)
// tslint:disable
import type { VAxiosInstance } from "@protobuf-ts/runtime-http";
import type { VAxios } from "@protobuf-ts/runtime-http";
import { HttpTransport } from "@protobuf-ts/runtime-http";
import type { ServiceInfo } from "@protobuf-ts/runtime-http";
import { Rum } from "./service";
import type { ReportReply } from "./message";
import type { ReportRequest } from "./message";
import type { HttpResult } from "@protobuf-ts/runtime-http";
import type { HttpOptions } from "@protobuf-ts/runtime-http";
/**
 * @generated from protobuf service rum.Rum
 */
export interface IRumClient$1 {
    /**
     * 上报接口
     *
     * @generated from protobuf rpc: Report(rum.ReportRequest) returns (rum.ReportReply);
     */
    report(input: ReportRequest, options?: HttpOptions["requestOptions"]): HttpResult<ReportReply>;
    /**
     * 下报接口
     *
     * @generated from protobuf rpc: transforming(rum.ReportRequest) returns (rum.ReportReply);
     */
    transforming(input: ReportRequest, options?: HttpOptions["requestOptions"]): HttpResult<ReportReply>;
}
/**
 * @generated from protobuf service rum.Rum
 */
export class RumClient$1 implements IRumClient$1, ServiceInfo {
    typeName = Rum.typeName;
    methods = Rum.methods;
    options = Rum.options;
    public defHttp: HttpTransport;
    constructor(vAxios: VAxios | VAxiosInstance, opt: HttpOptions = {}) {
        this.defHttp = new HttpTransport(vAxios, opt);
    }
    /**
     * 上报接口
     *
     * @generated from protobuf rpc: Report(rum.ReportRequest) returns (rum.ReportReply);
     */
    report(input: ReportRequest, options?: HttpOptions["requestOptions"]): HttpResult<ReportReply> {
        const method = this.methods[0], opt = options;
        return this.defHttp.request<ReportReply>(method, input, opt);
    }
    /**
     * 下报接口
     *
     * @generated from protobuf rpc: transforming(rum.ReportRequest) returns (rum.ReportReply);
     */
    transforming(input: ReportRequest, options?: HttpOptions["requestOptions"]): HttpResult<ReportReply> {
        const method = this.methods[1], opt = options;
        return this.defHttp.request<ReportReply>(method, input, opt);
    }
}
